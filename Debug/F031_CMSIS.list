
F031_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000844  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000904  0800090c  0001090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000904  08000904  0001090c  2**0
                  CONTENTS
  4 .ARM          00000000  08000904  08000904  0001090c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000904  0800090c  0001090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000904  08000904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000908  08000908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000000  0800090c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  0800090c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001090c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e9f  00000000  00000000  00010934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f9  00000000  00000000  000117d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00011cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00011e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008c42  00000000  00000000  00011ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014d9  00000000  00000000  0001ab2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002e66f  00000000  00000000  0001c003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004a672  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c8  00000000  00000000  0004a6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080008ec 	.word	0x080008ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080008ec 	.word	0x080008ec

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	; 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	; (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
  }
}
 8000130:	46c0      	nop			; (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <CMSIS_SW_Debug_Init>:
volatile uint32_t Delay_counter_ms = 0;

extern volatile uint16_t ADC_RAW_Data[3];


void CMSIS_SW_Debug_Init(void){
 800013c:	b580      	push	{r7, lr}
 800013e:	af00      	add	r7, sp, #0
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);  //I/O port A clock enabled
 8000140:	4b08      	ldr	r3, [pc, #32]	; (8000164 <CMSIS_SW_Debug_Init+0x28>)
 8000142:	695a      	ldr	r2, [r3, #20]
 8000144:	4b07      	ldr	r3, [pc, #28]	; (8000164 <CMSIS_SW_Debug_Init+0x28>)
 8000146:	2180      	movs	r1, #128	; 0x80
 8000148:	0289      	lsls	r1, r1, #10
 800014a:	430a      	orrs	r2, r1
 800014c:	615a      	str	r2, [r3, #20]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_DBGMCUEN);  //MCU debug module enabled
 800014e:	4b05      	ldr	r3, [pc, #20]	; (8000164 <CMSIS_SW_Debug_Init+0x28>)
 8000150:	699a      	ldr	r2, [r3, #24]
 8000152:	4b04      	ldr	r3, [pc, #16]	; (8000164 <CMSIS_SW_Debug_Init+0x28>)
 8000154:	2180      	movs	r1, #128	; 0x80
 8000156:	03c9      	lsls	r1, r1, #15
 8000158:	430a      	orrs	r2, r1
 800015a:	619a      	str	r2, [r3, #24]
}
 800015c:	46c0      	nop			; (mov r8, r8)
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
 8000162:	46c0      	nop			; (mov r8, r8)
 8000164:	40021000 	.word	0x40021000

08000168 <CMSIS_SET_PB3_OUTPUT_Push_Pull>:
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH2_Msk, 0b0100 << GPIO_AFRH_AFRH2_Pos);  //I2C1_SCL PA9
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH3_Msk, 0b0100 << GPIO_AFRH_AFRH3_Pos);  //I2C1_SDA PA10

}

void CMSIS_SET_PB3_OUTPUT_Push_Pull(void){
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN);  //I/O port B clock enabled
 800016c:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x44>)
 800016e:	695a      	ldr	r2, [r3, #20]
 8000170:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x44>)
 8000172:	2180      	movs	r1, #128	; 0x80
 8000174:	02c9      	lsls	r1, r1, #11
 8000176:	430a      	orrs	r2, r1
 8000178:	615a      	str	r2, [r3, #20]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER3_Msk, 0b01 << GPIO_MODER_MODER3_Pos);  //General purpose output mode
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x48>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	22c0      	movs	r2, #192	; 0xc0
 8000180:	4393      	bics	r3, r2
 8000182:	001a      	movs	r2, r3
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x48>)
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	430a      	orrs	r2, r1
 800018a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT_3);  //Output push-pull
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x48>)
 800018e:	685a      	ldr	r2, [r3, #4]
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x48>)
 8000192:	2108      	movs	r1, #8
 8000194:	438a      	bics	r2, r1
 8000196:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR3_Msk, 0b11 << GPIO_OSPEEDR_OSPEEDR3_Pos);  //High speed
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x48>)
 800019a:	689a      	ldr	r2, [r3, #8]
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <CMSIS_SET_PB3_OUTPUT_Push_Pull+0x48>)
 800019e:	21c0      	movs	r1, #192	; 0xc0
 80001a0:	430a      	orrs	r2, r1
 80001a2:	609a      	str	r2, [r3, #8]
}
 80001a4:	46c0      	nop			; (mov r8, r8)
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	40021000 	.word	0x40021000
 80001b0:	48000400 	.word	0x48000400

080001b4 <CMSIS_SET_PB4_OUTPUT_Push_Pull>:

void CMSIS_SET_PB4_OUTPUT_Push_Pull(void){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN);  //I/O port B clock enabled
 80001b8:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x44>)
 80001ba:	695a      	ldr	r2, [r3, #20]
 80001bc:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x44>)
 80001be:	2180      	movs	r1, #128	; 0x80
 80001c0:	02c9      	lsls	r1, r1, #11
 80001c2:	430a      	orrs	r2, r1
 80001c4:	615a      	str	r2, [r3, #20]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER4_Msk, 0b01 << GPIO_MODER_MODER4_Pos);  //General purpose output mode
 80001c6:	4b0d      	ldr	r3, [pc, #52]	; (80001fc <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x48>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x4c>)
 80001cc:	401a      	ands	r2, r3
 80001ce:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x48>)
 80001d0:	2180      	movs	r1, #128	; 0x80
 80001d2:	0049      	lsls	r1, r1, #1
 80001d4:	430a      	orrs	r2, r1
 80001d6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOB->OTYPER, GPIO_OTYPER_OT_4);   //Output push-pull
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x48>)
 80001da:	685a      	ldr	r2, [r3, #4]
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x48>)
 80001de:	2110      	movs	r1, #16
 80001e0:	438a      	bics	r2, r1
 80001e2:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR4_Msk, 0b11 << GPIO_OSPEEDR_OSPEEDR4_Pos);  //High speed
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x48>)
 80001e6:	689a      	ldr	r2, [r3, #8]
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <CMSIS_SET_PB4_OUTPUT_Push_Pull+0x48>)
 80001ea:	21c0      	movs	r1, #192	; 0xc0
 80001ec:	0089      	lsls	r1, r1, #2
 80001ee:	430a      	orrs	r2, r1
 80001f0:	609a      	str	r2, [r3, #8]
}
 80001f2:	46c0      	nop			; (mov r8, r8)
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	40021000 	.word	0x40021000
 80001fc:	48000400 	.word	0x48000400
 8000200:	fffffcff 	.word	0xfffffcff

08000204 <CMSIS_RCC_Init_48MHz>:

void CMSIS_RCC_Init_48MHz(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_HSION);  //HSI oscillator ON
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b25      	ldr	r3, [pc, #148]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 800020e:	2101      	movs	r1, #1
 8000210:	430a      	orrs	r2, r1
 8000212:	601a      	str	r2, [r3, #0]
	while((READ_BIT(RCC->CR, RCC_CR_HSIRDY)) == RESET);  //Waiting HSI oscillator ready flag
 8000214:	46c0      	nop			; (mov r8, r8)
 8000216:	4b23      	ldr	r3, [pc, #140]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2202      	movs	r2, #2
 800021c:	4013      	ands	r3, r2
 800021e:	d0fa      	beq.n	8000216 <CMSIS_RCC_Init_48MHz+0x12>
	CLEAR_BIT(RCC->CR, RCC_CR_HSEON);  //HSE oscillator OFF
 8000220:	4b20      	ldr	r3, [pc, #128]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000226:	4920      	ldr	r1, [pc, #128]	; (80002a8 <CMSIS_RCC_Init_48MHz+0xa4>)
 8000228:	400a      	ands	r2, r1
 800022a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);  //HSE crystal oscillator not bypassed
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000232:	491e      	ldr	r1, [pc, #120]	; (80002ac <CMSIS_RCC_Init_48MHz+0xa8>)
 8000234:	400a      	ands	r2, r1
 8000236:	601a      	str	r2, [r3, #0]

	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW_Msk, 0b10 << RCC_CFGR_SW_Pos);  //PLL selected as system clock
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	2203      	movs	r2, #3
 800023e:	4393      	bics	r3, r2
 8000240:	001a      	movs	r2, r3
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000244:	2102      	movs	r1, #2
 8000246:	430a      	orrs	r2, r1
 8000248:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE_Msk, 0b0000 << RCC_CFGR_HPRE_Pos);  //SYSCLK not divided
 800024a:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000250:	21f0      	movs	r1, #240	; 0xf0
 8000252:	438a      	bics	r2, r1
 8000254:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE_Msk, 0b000 << RCC_CFGR_PPRE_Pos);  //HCLK not divided
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000258:	685a      	ldr	r2, [r3, #4]
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 800025c:	4914      	ldr	r1, [pc, #80]	; (80002b0 <CMSIS_RCC_Init_48MHz+0xac>)
 800025e:	400a      	ands	r2, r1
 8000260:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC_Msk, 0b00 << RCC_CFGR_PLLSRC_Pos);  //HSI/2 selected as PLL input clock
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000268:	490f      	ldr	r1, [pc, #60]	; (80002a8 <CMSIS_RCC_Init_48MHz+0xa4>)
 800026a:	400a      	ands	r2, r1
 800026c:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL_Msk, 0b1010 << RCC_CFGR_PLLMUL_Pos);  //PLL input clock x 12
 800026e:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	4a10      	ldr	r2, [pc, #64]	; (80002b4 <CMSIS_RCC_Init_48MHz+0xb0>)
 8000274:	401a      	ands	r2, r3
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000278:	21a0      	movs	r1, #160	; 0xa0
 800027a:	0389      	lsls	r1, r1, #14
 800027c:	430a      	orrs	r2, r1
 800027e:	605a      	str	r2, [r3, #4]
	SET_BIT(RCC->CR, RCC_CR_PLLON);  //PLL ON
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	0449      	lsls	r1, r1, #17
 800028a:	430a      	orrs	r2, r1
 800028c:	601a      	str	r2, [r3, #0]
	while((READ_BIT(RCC->CR, RCC_CR_PLLRDY)) == RESET);  //Waiting PLL ready flag
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <CMSIS_RCC_Init_48MHz+0xa0>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	049b      	lsls	r3, r3, #18
 8000298:	4013      	ands	r3, r2
 800029a:	d0f9      	beq.n	8000290 <CMSIS_RCC_Init_48MHz+0x8c>

}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40021000 	.word	0x40021000
 80002a8:	fffeffff 	.word	0xfffeffff
 80002ac:	fffbffff 	.word	0xfffbffff
 80002b0:	fffff8ff 	.word	0xfffff8ff
 80002b4:	ffc3ffff 	.word	0xffc3ffff

080002b8 <CMSIS_Sys_Tick_Init>:

void CMSIS_Sys_Tick_Init(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);  //Counting down to zero to asserts the SysTick exception request
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002c2:	2102      	movs	r1, #2
 80002c4:	430a      	orrs	r2, r1
 80002c6:	601a      	str	r2, [r3, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);  //Processor clock
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002ce:	2104      	movs	r1, #4
 80002d0:	430a      	orrs	r2, r1
 80002d2:	601a      	str	r2, [r3, #0]
	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk, 47999 << SysTick_LOAD_RELOAD_Pos);  //1ms
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	0e1b      	lsrs	r3, r3, #24
 80002da:	061a      	lsls	r2, r3, #24
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002de:	490b      	ldr	r1, [pc, #44]	; (800030c <CMSIS_Sys_Tick_Init+0x54>)
 80002e0:	430a      	orrs	r2, r1
 80002e2:	605a      	str	r2, [r3, #4]
	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk, 47999 << SysTick_VAL_CURRENT_Pos);   //value start of counting
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	0e1b      	lsrs	r3, r3, #24
 80002ea:	061a      	lsls	r2, r3, #24
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002ee:	4907      	ldr	r1, [pc, #28]	; (800030c <CMSIS_Sys_Tick_Init+0x54>)
 80002f0:	430a      	orrs	r2, r1
 80002f2:	609a      	str	r2, [r3, #8]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk);  // Counter enabled
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <CMSIS_Sys_Tick_Init+0x50>)
 80002fa:	2101      	movs	r1, #1
 80002fc:	430a      	orrs	r2, r1
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	e000e010 	.word	0xe000e010
 800030c:	0000bb7f 	.word	0x0000bb7f

08000310 <Delay_ms>:

void Delay_ms(uint32_t Milliseconds){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <Delay_ms+0x24>)
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]
	while(Delay_counter_ms != 0);
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <Delay_ms+0x24>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1fb      	bne.n	8000320 <Delay_ms+0x10>
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b002      	add	sp, #8
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	20000020 	.word	0x20000020

08000338 <SysTick_Handler>:

void SysTick_Handler(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <SysTick_Handler+0x28>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	1c5a      	adds	r2, r3, #1
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <SysTick_Handler+0x28>)
 8000344:	601a      	str	r2, [r3, #0]
	if(Delay_counter_ms){
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <SysTick_Handler+0x2c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d004      	beq.n	8000358 <SysTick_Handler+0x20>
		Delay_counter_ms--;
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <SysTick_Handler+0x2c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	1e5a      	subs	r2, r3, #1
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <SysTick_Handler+0x2c>)
 8000356:	601a      	str	r2, [r3, #0]
	}
}
 8000358:	46c0      	nop			; (mov r8, r8)
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	2000001c 	.word	0x2000001c
 8000364:	20000020 	.word	0x20000020

08000368 <CMSIS_ADC_DMA_Init>:

void CMSIS_ADC_DMA_Init(void){
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	MODIFY_REG(ADC1->CFGR2, ADC_CFGR2_CKMODE_Msk, 0b10 << ADC_CFGR2_CKMODE_Pos);  //PCLK/4 (Synchronous clock mode)
 800036c:	4b58      	ldr	r3, [pc, #352]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	089a      	lsrs	r2, r3, #2
 8000374:	4b56      	ldr	r3, [pc, #344]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	0609      	lsls	r1, r1, #24
 800037a:	430a      	orrs	r2, r1
 800037c:	611a      	str	r2, [r3, #16]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADCEN);  //ADC interface clock enabled
 800037e:	4b55      	ldr	r3, [pc, #340]	; (80004d4 <CMSIS_ADC_DMA_Init+0x16c>)
 8000380:	699a      	ldr	r2, [r3, #24]
 8000382:	4b54      	ldr	r3, [pc, #336]	; (80004d4 <CMSIS_ADC_DMA_Init+0x16c>)
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	0089      	lsls	r1, r1, #2
 8000388:	430a      	orrs	r2, r1
 800038a:	619a      	str	r2, [r3, #24]
	SET_BIT(ADC1->IER, ADC_IER_EOCIE);  //EOC interrupt enabled. An interrupt is generated when the EOC bit is set.
 800038c:	4b50      	ldr	r3, [pc, #320]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	4b4f      	ldr	r3, [pc, #316]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000392:	2104      	movs	r1, #4
 8000394:	430a      	orrs	r2, r1
 8000396:	605a      	str	r2, [r3, #4]
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMAEN);  //DMA enabled
 8000398:	4b4d      	ldr	r3, [pc, #308]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	4b4c      	ldr	r3, [pc, #304]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 800039e:	2101      	movs	r1, #1
 80003a0:	430a      	orrs	r2, r1
 80003a2:	60da      	str	r2, [r3, #12]
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMACFG);  //DMA circular mode selected
 80003a4:	4b4a      	ldr	r3, [pc, #296]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003a6:	68da      	ldr	r2, [r3, #12]
 80003a8:	4b49      	ldr	r3, [pc, #292]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003aa:	2102      	movs	r1, #2
 80003ac:	430a      	orrs	r2, r1
 80003ae:	60da      	str	r2, [r3, #12]
	MODIFY_REG(ADC1->CFGR1, ADC_CFGR1_RES_Msk, 0b00 << ADC_CFGR1_RES_Pos);  //12 bits of resolution
 80003b0:	4b47      	ldr	r3, [pc, #284]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	4b46      	ldr	r3, [pc, #280]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003b6:	2118      	movs	r1, #24
 80003b8:	438a      	bics	r2, r1
 80003ba:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(ADC1->CFGR1, ADC_CFGR1_ALIGN);  //Right alignment
 80003bc:	4b44      	ldr	r3, [pc, #272]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003be:	68da      	ldr	r2, [r3, #12]
 80003c0:	4b43      	ldr	r3, [pc, #268]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003c2:	2120      	movs	r1, #32
 80003c4:	438a      	bics	r2, r1
 80003c6:	60da      	str	r2, [r3, #12]
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_CONT);  //Continuous conversion mode
 80003c8:	4b41      	ldr	r3, [pc, #260]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	4b40      	ldr	r3, [pc, #256]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	0189      	lsls	r1, r1, #6
 80003d2:	430a      	orrs	r2, r1
 80003d4:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(ADC1->CFGR1, ADC_CFGR1_DISCEN);  //Discontinuous mode disabled
 80003d6:	4b3e      	ldr	r3, [pc, #248]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003dc:	493e      	ldr	r1, [pc, #248]	; (80004d8 <CMSIS_ADC_DMA_Init+0x170>)
 80003de:	400a      	ands	r2, r1
 80003e0:	60da      	str	r2, [r3, #12]
	MODIFY_REG(ADC1->SMPR, ADC_SMPR_SMP_Msk, 0b111 << ADC_SMPR_SMP_Pos);  //239.5 ADC clock cycles
 80003e2:	4b3b      	ldr	r3, [pc, #236]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b3a      	ldr	r3, [pc, #232]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003e8:	2107      	movs	r1, #7
 80003ea:	430a      	orrs	r2, r1
 80003ec:	615a      	str	r2, [r3, #20]
	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL1);
 80003ee:	4b38      	ldr	r3, [pc, #224]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003f2:	4b37      	ldr	r3, [pc, #220]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003f4:	2102      	movs	r1, #2
 80003f6:	430a      	orrs	r2, r1
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL2);
 80003fa:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 80003fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003fe:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000400:	2104      	movs	r1, #4
 8000402:	430a      	orrs	r2, r1
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL17);
 8000406:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0289      	lsls	r1, r1, #10
 8000410:	430a      	orrs	r2, r1
 8000412:	629a      	str	r2, [r3, #40]	; 0x28
	ADC->CCR |= ADC_CCR_VREFEN;  //VREFINT enabled
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <CMSIS_ADC_DMA_Init+0x174>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b30      	ldr	r3, [pc, #192]	; (80004dc <CMSIS_ADC_DMA_Init+0x174>)
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	03c9      	lsls	r1, r1, #15
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
	SET_BIT(ADC1->CR, ADC_CR_ADSTART);
 8000422:	4b2b      	ldr	r3, [pc, #172]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000424:	689a      	ldr	r2, [r3, #8]
 8000426:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000428:	2104      	movs	r1, #4
 800042a:	430a      	orrs	r2, r1
 800042c:	609a      	str	r2, [r3, #8]
	SET_BIT(ADC1->CR, ADC_CR_ADEN);  //ADC enable
 800042e:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <CMSIS_ADC_DMA_Init+0x168>)
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]

	SET_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN);  // DMA clock enabled
 800043a:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <CMSIS_ADC_DMA_Init+0x16c>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <CMSIS_ADC_DMA_Init+0x16c>)
 8000440:	2101      	movs	r1, #1
 8000442:	430a      	orrs	r2, r1
 8000444:	615a      	str	r2, [r3, #20]
	DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));  //Adress periferium
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 8000448:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <CMSIS_ADC_DMA_Init+0x17c>)
 800044a:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(ADC_RAW_Data);  //Buffer for data
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800044e:	4a26      	ldr	r2, [pc, #152]	; (80004e8 <CMSIS_ADC_DMA_Init+0x180>)
 8000450:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 3;  //count data for transmit
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 8000454:	2203      	movs	r2, #3
 8000456:	605a      	str	r2, [r3, #4]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_TCIE);  //TC interrupt enabled
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800045e:	2102      	movs	r1, #2
 8000460:	430a      	orrs	r2, r1
 8000462:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(DMA1_Channel1->CCR, DMA_CCR_DIR);  //Read from peripheral
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800046a:	2110      	movs	r1, #16
 800046c:	438a      	bics	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_CIRC);  //circular mode enable
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 8000476:	2120      	movs	r1, #32
 8000478:	430a      	orrs	r2, r1
 800047a:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_MINC);  //memory increment mode
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 8000482:	2180      	movs	r1, #128	; 0x80
 8000484:	430a      	orrs	r2, r1
 8000486:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_TEIE);  //transfer error interrupt enable
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800048e:	2108      	movs	r1, #8
 8000490:	430a      	orrs	r2, r1
 8000492:	601a      	str	r2, [r3, #0]
	MODIFY_REG(DMA1_Channel1->CCR, DMA_CCR_MSIZE_Msk, 0b01 << DMA_CCR_MSIZE_Pos);  //16 bits
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <CMSIS_ADC_DMA_Init+0x184>)
 800049a:	401a      	ands	r2, r3
 800049c:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	00c9      	lsls	r1, r1, #3
 80004a2:	430a      	orrs	r2, r1
 80004a4:	601a      	str	r2, [r3, #0]
	MODIFY_REG(DMA1_Channel1->CCR, DMA_CCR_PSIZE_Msk, 0b01 << DMA_CCR_PSIZE_Pos);  //16 bits
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <CMSIS_ADC_DMA_Init+0x188>)
 80004ac:	401a      	ands	r2, r3
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0049      	lsls	r1, r1, #1
 80004b4:	430a      	orrs	r2, r1
 80004b6:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_EN);  //channel enable
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <CMSIS_ADC_DMA_Init+0x178>)
 80004be:	2101      	movs	r1, #1
 80004c0:	430a      	orrs	r2, r1
 80004c2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004c4:	2009      	movs	r0, #9
 80004c6:	f7ff fe1f 	bl	8000108 <__NVIC_EnableIRQ>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40012400 	.word	0x40012400
 80004d4:	40021000 	.word	0x40021000
 80004d8:	fffeffff 	.word	0xfffeffff
 80004dc:	40012708 	.word	0x40012708
 80004e0:	40020008 	.word	0x40020008
 80004e4:	40012440 	.word	0x40012440
 80004e8:	200000f4 	.word	0x200000f4
 80004ec:	fffff3ff 	.word	0xfffff3ff
 80004f0:	fffffcff 	.word	0xfffffcff

080004f4 <CMSIS_SET_PA1_ADC_IN1>:

void CMSIS_SET_PA1_ADC_IN1(void){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);  //I/O port A clock enabled
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <CMSIS_SET_PA1_ADC_IN1+0x28>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <CMSIS_SET_PA1_ADC_IN1+0x28>)
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0289      	lsls	r1, r1, #10
 8000502:	430a      	orrs	r2, r1
 8000504:	615a      	str	r2, [r3, #20]
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER1_Msk, 0b11 << GPIO_MODER_MODER1_Pos);  //Analog mode PA1
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	2390      	movs	r3, #144	; 0x90
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	210c      	movs	r1, #12
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000

08000520 <CMSIS_SET_PA2_ADC_IN2>:

void CMSIS_SET_PA2_ADC_IN2(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);  //I/O port A clock enabled
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <CMSIS_SET_PA2_ADC_IN2+0x28>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <CMSIS_SET_PA2_ADC_IN2+0x28>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0289      	lsls	r1, r1, #10
 800052e:	430a      	orrs	r2, r1
 8000530:	615a      	str	r2, [r3, #20]
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER2_Msk, 0b11 << GPIO_MODER_MODER2_Pos);  //Analog mode PA2
 8000532:	2390      	movs	r3, #144	; 0x90
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	2390      	movs	r3, #144	; 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2130      	movs	r1, #48	; 0x30
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <CMSIS_I2C1_Init>:

void CMSIS_I2C1_Init(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
		//Page 684//
	CMSIS_SET_PB9_I2C1_SCL();
 8000550:	f000 f83e 	bl	80005d0 <CMSIS_SET_PB9_I2C1_SCL>
	CMSIS_SET_PB10_I2C1_SDA();
 8000554:	f000 f858 	bl	8000608 <CMSIS_SET_PB10_I2C1_SDA>
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN);  // I2C1 clock enabled
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <CMSIS_I2C1_Init+0x70>)
 800055a:	69da      	ldr	r2, [r3, #28]
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <CMSIS_I2C1_Init+0x70>)
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	0389      	lsls	r1, r1, #14
 8000562:	430a      	orrs	r2, r1
 8000564:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_ADD10);  //The master operates in 7-bit addressing mode
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 8000568:	685a      	ldr	r2, [r3, #4]
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 800056c:	4915      	ldr	r1, [pc, #84]	; (80005c4 <CMSIS_I2C1_Init+0x78>)
 800056e:	400a      	ands	r2, r1
 8000570:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(I2C1->CR2, I2C_CR2_RD_WRN);  //Master requests a write transfer
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 8000574:	685a      	ldr	r2, [r3, #4]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 8000578:	4913      	ldr	r1, [pc, #76]	; (80005c8 <CMSIS_I2C1_Init+0x7c>)
 800057a:	400a      	ands	r2, r1
 800057c:	605a      	str	r2, [r3, #4]
	MODIFY_REG(I2C1->CR2, I2C_CR2_SADD_Msk, 0x4e << I2C_CR2_SADD_Pos); //7-bit slave address
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	0a9b      	lsrs	r3, r3, #10
 8000584:	029a      	lsls	r2, r3, #10
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 8000588:	214e      	movs	r1, #78	; 0x4e
 800058a:	430a      	orrs	r2, r1
 800058c:	605a      	str	r2, [r3, #4]
	I2C1->TIMINGR = (uint32_t)0x00B01A4B;  //fast Mode @400kHz
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <CMSIS_I2C1_Init+0x80>)
 8000592:	611a      	str	r2, [r3, #16]
	SET_BIT(I2C1->CR2, I2C_CR2_AUTOEND); //Automatic end mode: a STOP condition is automatically sent when NBYTES data
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	0489      	lsls	r1, r1, #18
 800059e:	430a      	orrs	r2, r1
 80005a0:	605a      	str	r2, [r3, #4]
	I2C1->CR2 = (1 << 16);
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	0252      	lsls	r2, r2, #9
 80005a8:	605a      	str	r2, [r3, #4]
	SET_BIT(I2C1->CR1, I2C_CR1_PE);  //Periph enable
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <CMSIS_I2C1_Init+0x74>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]
}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40005400 	.word	0x40005400
 80005c4:	fffff7ff 	.word	0xfffff7ff
 80005c8:	fffffbff 	.word	0xfffffbff
 80005cc:	00b01a4b 	.word	0x00b01a4b

080005d0 <CMSIS_SET_PB9_I2C1_SCL>:

void CMSIS_SET_PB9_I2C1_SCL(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN);  //I/O port B clock enabled
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <CMSIS_SET_PB9_I2C1_SCL+0x2c>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <CMSIS_SET_PB9_I2C1_SCL+0x2c>)
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	02c9      	lsls	r1, r1, #11
 80005de:	430a      	orrs	r2, r1
 80005e0:	615a      	str	r2, [r3, #20]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER9_Msk, 0b10 << GPIO_MODER_MODER9_Pos);  //Alternate function mode
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <CMSIS_SET_PB9_I2C1_SCL+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <CMSIS_SET_PB9_I2C1_SCL+0x34>)
 80005e8:	401a      	ands	r2, r3
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <CMSIS_SET_PB9_I2C1_SCL+0x30>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0309      	lsls	r1, r1, #12
 80005f0:	430a      	orrs	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000400 	.word	0x48000400
 8000604:	fff3ffff 	.word	0xfff3ffff

08000608 <CMSIS_SET_PB10_I2C1_SDA>:

void CMSIS_SET_PB10_I2C1_SDA(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN);  //I/O port B clock enabled
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <CMSIS_SET_PB10_I2C1_SDA+0x2c>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <CMSIS_SET_PB10_I2C1_SDA+0x2c>)
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	02c9      	lsls	r1, r1, #11
 8000616:	430a      	orrs	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER10_Msk, 0b10 << GPIO_MODER_MODER10_Pos);  //Alternate function mode
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <CMSIS_SET_PB10_I2C1_SDA+0x30>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <CMSIS_SET_PB10_I2C1_SDA+0x34>)
 8000620:	401a      	ands	r2, r3
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <CMSIS_SET_PB10_I2C1_SDA+0x30>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	0389      	lsls	r1, r1, #14
 8000628:	430a      	orrs	r2, r1
 800062a:	601a      	str	r2, [r3, #0]
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400
 800063c:	ffcfffff 	.word	0xffcfffff

08000640 <SMA_FILTER_Get_Value>:
 *  @param  *SMA_Filter_buffer - Массив, где будут лежать сырые значения
 *  @param  *RAW_Data - Сырые данные
 *  @retval  SMA_Filter_Result - Значение, полученное после SMA фильтра.
 ******************************************************************************
 */
uint16_t SMA_FILTER_Get_Value(uint16_t *SMA_Filter_buffer, uint16_t *RAW_Data) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]

	/* Создадим переменную для суммы сырых значений */
	uint32_t SMA_Filter_Result = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]

	/* Начнем заполнять массив сырыми значениями с конца */
	SMA_Filter_buffer[SMA_FILTER_ORDER - 1] = *RAW_Data;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	333e      	adds	r3, #62	; 0x3e
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	8812      	ldrh	r2, [r2, #0]
 8000656:	801a      	strh	r2, [r3, #0]

	/* Просуммируем все элементы массива */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000658:	230b      	movs	r3, #11
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e00f      	b.n	8000682 <SMA_FILTER_Get_Value+0x42>
		SMA_Filter_Result += SMA_Filter_buffer[i];
 8000662:	210b      	movs	r1, #11
 8000664:	187b      	adds	r3, r7, r1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	18d3      	adds	r3, r2, r3
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	001a      	movs	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	189b      	adds	r3, r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000678:	187b      	adds	r3, r7, r1
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	187b      	adds	r3, r7, r1
 800067e:	3201      	adds	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	230b      	movs	r3, #11
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b1f      	cmp	r3, #31
 800068a:	d9ea      	bls.n	8000662 <SMA_FILTER_Get_Value+0x22>
	 * 32 = 2*2*2*2*2;
	 * Тогда SMA_Filter_Result = SMA_Filter_Result/32 будет равен, как SMA_Filter_Result = SMA_Filter_Result >> 5u;
	 *
	 */
	//SMA_Filter_Result = SMA_Filter_Result / SMA_FILTER_ORDER;
	SMA_Filter_Result = SMA_Filter_Result >> 5u; //32 = 2^5;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	60fb      	str	r3, [r7, #12]

	/* Сдвинем все элементы массива влево на 1 */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000692:	230a      	movs	r3, #10
 8000694:	18fb      	adds	r3, r7, r3
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
 800069a:	e012      	b.n	80006c2 <SMA_FILTER_Get_Value+0x82>
		SMA_Filter_buffer[i] = SMA_Filter_buffer[i + 1];
 800069c:	200a      	movs	r0, #10
 800069e:	183b      	adds	r3, r7, r0
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	18d2      	adds	r2, r2, r3
 80006aa:	183b      	adds	r3, r7, r0
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	6879      	ldr	r1, [r7, #4]
 80006b2:	18cb      	adds	r3, r1, r3
 80006b4:	8812      	ldrh	r2, [r2, #0]
 80006b6:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 80006b8:	183b      	adds	r3, r7, r0
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	183b      	adds	r3, r7, r0
 80006be:	3201      	adds	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	230a      	movs	r3, #10
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b1f      	cmp	r3, #31
 80006ca:	d9e7      	bls.n	800069c <SMA_FILTER_Get_Value+0x5c>
	}

	return (uint16_t)SMA_Filter_Result; //Вернем среднее арифметическое значение
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	b29b      	uxth	r3, r3
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b004      	add	sp, #16
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <DMA1_Channel1_IRQHandler>:
uint16_t SMA_Filter_Buffer_3[SMA_FILTER_ORDER] = { 0, };
uint16_t ADC_SMA_Data[3] = {0, };
volatile uint16_t ADC_RAW_Data[3] = {0, };
volatile uint32_t Counter_DMA = 0;

void DMA1_Channel1_IRQHandler(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF1)){
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <DMA1_Channel1_IRQHandler+0x90>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2202      	movs	r2, #2
 80006e2:	4013      	ands	r3, r2
 80006e4:	d032      	beq.n	800074c <DMA1_Channel1_IRQHandler+0x74>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF1);
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <DMA1_Channel1_IRQHandler+0x90>)
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <DMA1_Channel1_IRQHandler+0x90>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	605a      	str	r2, [r3, #4]
		Counter_DMA++;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <DMA1_Channel1_IRQHandler+0x94>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	1c5a      	adds	r2, r3, #1
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <DMA1_Channel1_IRQHandler+0x94>)
 80006fa:	601a      	str	r2, [r3, #0]
		if(Counter_DMA == 1200) {
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <DMA1_Channel1_IRQHandler+0x94>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	2396      	movs	r3, #150	; 0x96
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	429a      	cmp	r2, r3
 8000706:	d12c      	bne.n	8000762 <DMA1_Channel1_IRQHandler+0x8a>
		  		Counter_DMA = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <DMA1_Channel1_IRQHandler+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
		  		ADC_SMA_Data[0] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_1, &ADC_RAW_Data[0]);
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <DMA1_Channel1_IRQHandler+0x98>)
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <DMA1_Channel1_IRQHandler+0x9c>)
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f7ff ff93 	bl	8000640 <SMA_FILTER_Get_Value>
 800071a:	0003      	movs	r3, r0
 800071c:	001a      	movs	r2, r3
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <DMA1_Channel1_IRQHandler+0xa0>)
 8000720:	801a      	strh	r2, [r3, #0]
		  		ADC_SMA_Data[1] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_2, &ADC_RAW_Data[1]);
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <DMA1_Channel1_IRQHandler+0xa4>)
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <DMA1_Channel1_IRQHandler+0xa8>)
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ff89 	bl	8000640 <SMA_FILTER_Get_Value>
 800072e:	0003      	movs	r3, r0
 8000730:	001a      	movs	r2, r3
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <DMA1_Channel1_IRQHandler+0xa0>)
 8000734:	805a      	strh	r2, [r3, #2]
		  		ADC_SMA_Data[2] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_3, &ADC_RAW_Data[2]);
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <DMA1_Channel1_IRQHandler+0xac>)
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <DMA1_Channel1_IRQHandler+0xb0>)
 800073a:	0011      	movs	r1, r2
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff ff7f 	bl	8000640 <SMA_FILTER_Get_Value>
 8000742:	0003      	movs	r3, r0
 8000744:	001a      	movs	r2, r3
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <DMA1_Channel1_IRQHandler+0xa0>)
 8000748:	809a      	strh	r2, [r3, #4]
		}
	}
	else if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF1)) {
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF1);
	}
}
 800074a:	e00a      	b.n	8000762 <DMA1_Channel1_IRQHandler+0x8a>
	else if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF1)) {
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <DMA1_Channel1_IRQHandler+0x90>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2208      	movs	r2, #8
 8000752:	4013      	ands	r3, r2
 8000754:	d005      	beq.n	8000762 <DMA1_Channel1_IRQHandler+0x8a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF1);
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <DMA1_Channel1_IRQHandler+0x90>)
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4b03      	ldr	r3, [pc, #12]	; (8000768 <DMA1_Channel1_IRQHandler+0x90>)
 800075c:	2108      	movs	r1, #8
 800075e:	430a      	orrs	r2, r1
 8000760:	605a      	str	r2, [r3, #4]
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020000 	.word	0x40020000
 800076c:	200000fc 	.word	0x200000fc
 8000770:	200000f4 	.word	0x200000f4
 8000774:	2000002c 	.word	0x2000002c
 8000778:	200000ec 	.word	0x200000ec
 800077c:	200000f6 	.word	0x200000f6
 8000780:	2000006c 	.word	0x2000006c
 8000784:	200000f8 	.word	0x200000f8
 8000788:	200000ac 	.word	0x200000ac

0800078c <blink_led>:

void blink_led(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	if (SysTimer_ms - t_led > 200){
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <blink_led+0x64>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <blink_led+0x68>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2bc8      	cmp	r3, #200	; 0xc8
 800079c:	d911      	bls.n	80007c2 <blink_led+0x36>
		t_led = SysTimer_ms;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <blink_led+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <blink_led+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
		led_flag = !led_flag;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <blink_led+0x6c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	4193      	sbcs	r3, r2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2201      	movs	r2, #1
 80007b2:	4053      	eors	r3, r2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	1c1a      	adds	r2, r3, #0
 80007b8:	2301      	movs	r3, #1
 80007ba:	4013      	ands	r3, r2
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <blink_led+0x6c>)
 80007c0:	701a      	strb	r2, [r3, #0]
	}
	if (led_flag) {
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <blink_led+0x6c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <blink_led+0x46>
		WRITE_REG(GPIOB->BSRR, GPIO_BSRR_BS_3);
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <blink_led+0x70>)
 80007cc:	2208      	movs	r2, #8
 80007ce:	619a      	str	r2, [r3, #24]
	} else if (!led_flag) {
		WRITE_REG(GPIOB->BSRR, GPIO_BSRR_BR_3);
	}
}
 80007d0:	e00a      	b.n	80007e8 <blink_led+0x5c>
	} else if (!led_flag) {
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <blink_led+0x6c>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2201      	movs	r2, #1
 80007d8:	4053      	eors	r3, r2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <blink_led+0x5c>
		WRITE_REG(GPIOB->BSRR, GPIO_BSRR_BR_3);
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <blink_led+0x70>)
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0312      	lsls	r2, r2, #12
 80007e6:	619a      	str	r2, [r3, #24]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	2000001c 	.word	0x2000001c
 80007f4:	20000028 	.word	0x20000028
 80007f8:	20000024 	.word	0x20000024
 80007fc:	48000400 	.word	0x48000400

08000800 <main>:

int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	CMSIS_SW_Debug_Init();
 8000804:	f7ff fc9a 	bl	800013c <CMSIS_SW_Debug_Init>
	CMSIS_RCC_Init_48MHz();
 8000808:	f7ff fcfc 	bl	8000204 <CMSIS_RCC_Init_48MHz>
	CMSIS_Sys_Tick_Init();
 800080c:	f7ff fd54 	bl	80002b8 <CMSIS_Sys_Tick_Init>
	CMSIS_SET_PA1_ADC_IN1();
 8000810:	f7ff fe70 	bl	80004f4 <CMSIS_SET_PA1_ADC_IN1>
	CMSIS_SET_PA2_ADC_IN2();
 8000814:	f7ff fe84 	bl	8000520 <CMSIS_SET_PA2_ADC_IN2>
	CMSIS_ADC_DMA_Init();
 8000818:	f7ff fda6 	bl	8000368 <CMSIS_ADC_DMA_Init>
	CMSIS_I2C1_Init();
 800081c:	f7ff fe96 	bl	800054c <CMSIS_I2C1_Init>
	Delay_ms(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f7ff fd75 	bl	8000310 <Delay_ms>
	CMSIS_SET_PB3_OUTPUT_Push_Pull();
 8000826:	f7ff fc9f 	bl	8000168 <CMSIS_SET_PB3_OUTPUT_Push_Pull>
	CMSIS_SET_PB4_OUTPUT_Push_Pull();
 800082a:	f7ff fcc3 	bl	80001b4 <CMSIS_SET_PB4_OUTPUT_Push_Pull>

	t_led = SysTimer_ms;
 800082e:	4b03      	ldr	r3, [pc, #12]	; (800083c <main+0x3c>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b03      	ldr	r3, [pc, #12]	; (8000840 <main+0x40>)
 8000834:	601a      	str	r2, [r3, #0]
	while (1)
	{
		blink_led();
 8000836:	f7ff ffa9 	bl	800078c <blink_led>
 800083a:	e7fc      	b.n	8000836 <main+0x36>
 800083c:	2000001c 	.word	0x2000001c
 8000840:	20000028 	.word	0x20000028

08000844 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000852:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800087a:	f7ff ffe3 	bl	8000844 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800087e:	f000 f811 	bl	80008a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000882:	f7ff ffbd 	bl	8000800 <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   r0, =_estack
 8000888:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000894:	0800090c 	.word	0x0800090c
  ldr r2, =_sbss
 8000898:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800089c:	20000100 	.word	0x20000100

080008a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_IRQHandler>
	...

080008a4 <__libc_init_array>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	2600      	movs	r6, #0
 80008a8:	4d0c      	ldr	r5, [pc, #48]	; (80008dc <__libc_init_array+0x38>)
 80008aa:	4c0d      	ldr	r4, [pc, #52]	; (80008e0 <__libc_init_array+0x3c>)
 80008ac:	1b64      	subs	r4, r4, r5
 80008ae:	10a4      	asrs	r4, r4, #2
 80008b0:	42a6      	cmp	r6, r4
 80008b2:	d109      	bne.n	80008c8 <__libc_init_array+0x24>
 80008b4:	2600      	movs	r6, #0
 80008b6:	f000 f819 	bl	80008ec <_init>
 80008ba:	4d0a      	ldr	r5, [pc, #40]	; (80008e4 <__libc_init_array+0x40>)
 80008bc:	4c0a      	ldr	r4, [pc, #40]	; (80008e8 <__libc_init_array+0x44>)
 80008be:	1b64      	subs	r4, r4, r5
 80008c0:	10a4      	asrs	r4, r4, #2
 80008c2:	42a6      	cmp	r6, r4
 80008c4:	d105      	bne.n	80008d2 <__libc_init_array+0x2e>
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	00b3      	lsls	r3, r6, #2
 80008ca:	58eb      	ldr	r3, [r5, r3]
 80008cc:	4798      	blx	r3
 80008ce:	3601      	adds	r6, #1
 80008d0:	e7ee      	b.n	80008b0 <__libc_init_array+0xc>
 80008d2:	00b3      	lsls	r3, r6, #2
 80008d4:	58eb      	ldr	r3, [r5, r3]
 80008d6:	4798      	blx	r3
 80008d8:	3601      	adds	r6, #1
 80008da:	e7f2      	b.n	80008c2 <__libc_init_array+0x1e>
 80008dc:	08000904 	.word	0x08000904
 80008e0:	08000904 	.word	0x08000904
 80008e4:	08000904 	.word	0x08000904
 80008e8:	08000908 	.word	0x08000908

080008ec <_init>:
 80008ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f2:	bc08      	pop	{r3}
 80008f4:	469e      	mov	lr, r3
 80008f6:	4770      	bx	lr

080008f8 <_fini>:
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fe:	bc08      	pop	{r3}
 8000900:	469e      	mov	lr, r3
 8000902:	4770      	bx	lr
